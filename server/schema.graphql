type Query {
    medicalRecords: [MedicalRecords]
    medicalRecordsByPatientId(patientId: ID!): [MedicalRecords]
    user(userId: ID!): Users
    activeTokens: [Tokens]
}

type MedicalRecords {
    recordId: ID!
    recordData: String!
    dateCreated: String!
    recordType: RecordTypes!
}

type RecordTypes {
    recordTypeId: ID!
    recordName: String!
}

type Users {
    userId: ID!
    firstName: String!
    lastName: String!
    email: String!
    userType: String!
    password: String!
    acceptTerms: Boolean!
    patient: Patients
    doctor: Doctors
}

type Patients {
    patientId: ID!
    dateOfBirth: String
    gender: String
}

type Doctors {
    doctorId: ID!
    specialty: String
    licenseNumber: String
}

type Mutation {
    createUser(input: CreateUserInput!): UserConfirmation
    createPatientOrDoctorUser(userId: ID!, userType: String!): UserConfirmation
    updateUser(input: UpdateUserInput!): UserConfirmation
    updatePatientUser(input: UpdatePatientInput!): UserConfirmation
    updateDoctorUser(input: UpdateDoctorInput!): UserConfirmation
    login(email: String!, password: String!): LoginResult
    generateToken(expirationDate: String!): TokenResult
    saveTokenAccess(tokenId: ID!, doctorId: ID!): TokenAccessResult
}

input CreateUserInput {
    firstName: String!
    lastName: String!
    email: String!
    userType: String!
    password: String!
    acceptTerms: Boolean!
}

input UpdateUserInput {
    firstName: String!
    lastName: String!
    email: String!
}

input UpdatePatientInput {
    dateOfBirth: String!
    gender: String!
}

input UpdateDoctorInput {
    specialty: String!
    licenseNumber: String!
}

type UserConfirmation {
    userConfirmation: String
    userError: String
    user: Users
    token: String
}

type LoginResult {
    user: Users
    error: String
    token: String
}

type Tokens {
    tokenId: ID!
    token: String!
    expirationDate: String!
    patientId: ID!
}

type TokenResult {
    token: Tokens
    tokenConfirmation: String
    tokenError: String
}

type TokenAccessResult {
    accessConfirmation: String
    accessError: String
}
